spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: my-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

app:
  kafka:
    source-topic: source_topic
    target-topic: target_topic

package com.example.kafkaconsumerproducer;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaService {

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final String targetTopic;

    public KafkaService(
            KafkaTemplate<String, String> kafkaTemplate,
            @Value("${app.kafka.target-topic}") String targetTopic
    ) {
        this.kafkaTemplate = kafkaTemplate;
        this.targetTopic = targetTopic;
    }

    @KafkaListener(topics = "${app.kafka.source-topic}", groupId = "${spring.kafka.consumer.group-id}")
    public void consume(String message) {
        System.out.println("Consumed: " + message);

        // Example processing
        String processed = message + " [processed]";

        // Send to another topic
        kafkaTemplate.send(targetTopic, processed);
        System.out.println("Produced to " + targetTopic + ": " + processed);
    }
}
