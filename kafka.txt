spring:
  kafka:
    bootstrap-servers: your.kafka.server:9093
    properties:
      security.protocol: SASL_SSL
      ssl.truststore.location: /path/to/truststore.jks
      ssl.truststore.password: changeit
      ssl.truststore.type: JKS

consumer:
  kafka:
    sasl:
      mechanism: SCRAM-SHA-512
      jaas-config: org.apache.kafka.common.security.scram.ScramLoginModule required \
        username="consumer_user" \
        password="consumer_pass";

producer:
  kafka:
    sasl:
      mechanism: SCRAM-SHA-512
      jaas-config: org.apache.kafka.common.security.scram.ScramLoginModule required \
        username="producer_user" \
        password="producer_pass";

app:
  kafka:
    source-topic: source_topic
    target-topic: target_topic



import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.kafka.ConcurrentKafkaListenerContainerFactoryConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.*;

import java.util.HashMap;
import java.util.Map;

@EnableKafka
@Configuration
public class KafkaConfig {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${consumer.kafka.sasl.jaas-config}")
    private String consumerJaasConfig;

    @Value("${producer.kafka.sasl.jaas-config}")
    private String producerJaasConfig;

    @Value("${spring.kafka.properties.ssl.truststore.location}")
    private String truststoreLocation;

    @Value("${spring.kafka.properties.ssl.truststore.password}")
    private String truststorePassword;

    @Value("${spring.kafka.properties.ssl.truststore.type}")
    private String truststoreType;

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "my-consumer-group");

        props.put("security.protocol", "SASL_SSL");
        props.put("sasl.mechanism", "SCRAM-SHA-512");
        props.put("sasl.jaas.config", consumerJaasConfig);
        props.put("ssl.truststore.location", truststoreLocation);
        props.put("ssl.truststore.password", truststorePassword);
        props.put("ssl.truststore.type", truststoreType);

        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(new DefaultKafkaConsumerFactory<>(props));
        return factory;
    }

    @Bean
    public KafkaTemplate<String, String> producerTemplate() {
        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);

        props.put("security.protocol", "SASL_SSL");
        props.put("sasl.mechanism", "SCRAM-SHA-512");
        props.put("sasl.jaas.config", producerJaasConfig);
        props.put("ssl.truststore.location", truststoreLocation);
        props.put("ssl.truststore.password", truststorePassword);
        props.put("ssl.truststore.type", truststoreType);

        return new KafkaTemplate<>(new DefaultKafkaProducerFactory<>(props));
    }
}



import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaService {

    private final KafkaTemplate<String, String> producer;
    private final String targetTopic;

    public KafkaService(KafkaTemplate<String, String> producer,
                        @Value("${app.kafka.target-topic}") String targetTopic) {
        this.producer = producer;
        this.targetTopic = targetTopic;
    }

    @KafkaListener(
        topics = "${app.kafka.source-topic}",
        containerFactory = "consumerFactory"
    )
    public void consume(String message) {
        System.out.println("Consumed: " + message);

        String processed = message + " [processed]";
        producer.send(targetTopic, processed);
        System.out.println("Produced to " + targetTopic + ": " + processed);
    }
}


import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

@Component
public class TruststoreInitializer implements ApplicationRunner {

    @Value("classpath:truststore.jks")
    private Resource truststoreResource;

    @Override
    public void run(ApplicationArguments args) throws Exception {
        File tempTruststore = File.createTempFile("truststore", ".jks");
        tempTruststore.deleteOnExit();

        try (InputStream in = truststoreResource.getInputStream();
             FileOutputStream out = new FileOutputStream(tempTruststore)) {
            in.transferTo(out);
        }

        // Set absolute path for Kafka
        System.setProperty("spring.kafka.properties.ssl.truststore.location",
                tempTruststore.getAbsolutePath());

        System.out.println("Truststore loaded from classpath to: " + tempTruststore.getAbsolutePath());
    }
}




public class TruststoreInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {
    @Override
    public void initialize(ConfigurableApplicationContext context) {
        try {
            Resource resource = context.getResource("classpath:truststore.jks");
            File tempTruststore = File.createTempFile("truststore", ".jks");
            tempTruststore.deleteOnExit();
            try (InputStream in = resource.getInputStream();
                 FileOutputStream out = new FileOutputStream(tempTruststore)) {
                in.transferTo(out);
            }
            System.setProperty("spring.kafka.properties.ssl.truststore.location", tempTruststore.getAbsolutePath());
            System.out.println("Truststore initialized at: " + tempTruststore.getAbsolutePath());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
