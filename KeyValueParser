(actually loadrunner paramters pattern:
[parametr:SomeKindOfName] Key1="Value 1" Key2="Value 2" Key3="4" [parametr:SomeKindOfNameNumber2] Key1="Value 1" Key2="Value 2" Key3="4")

public static Map<String, Map<String, String>> parse(File file) throws IOException {
        Map<String, Map<String, String>> result = new LinkedHashMap<>();
        Map<String, String> currentSection = null;
        String currentSectionName = null;

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty() || line.startsWith("#")) {
                    continue; // skip comments/empty
                }

                if (line.startsWith("[parametr:")) {
                    currentSectionName = line.substring(10, line.length() - 1);
                    currentSection = new LinkedHashMap<>();
                    result.put(currentSectionName, currentSection);
                } else if (currentSection != null && line.contains("=")) {
                    String[] parts = line.split("=", 2);
                    String key = parts[0].trim();
                    String value = parts[1].trim().replaceAll("^\"|\"$", ""); // remove quotes
                    currentSection.put(key, value);
                }
            }
        }
        return result;
    }

    public static void write(File file, Map<String, Map<String, String>> data) throws IOException {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (Map.Entry<String, Map<String, String>> section : data.entrySet()) {
                bw.write("[parametr:" + section.getKey() + "]");
                bw.newLine();
                for (Map.Entry<String, String> kv : section.getValue().entrySet()) {
                    bw.write(kv.getKey() + "=\"" + kv.getValue() + "\"");
                    bw.newLine();
                }
                bw.newLine();
            }
        }
    }
